/*
 * SPI.c
 *
 *  Created on: 2017Äê11ÔÂ20ÈÕ
 *      Author: leo
 */
#include "SPI.h"
#include <msp430.h>
void SPI_init(void)
{

	//P3DIR |= BIT4+BIT5+BIT6;//Chip Select

	P3SEL |= BIT1 + BIT2 + BIT3;
	UCB0CTL0 |= UCMST+UCSYNC+UCMSB;    //3-pin, 8-bit SPI master
	UCB0CTL1 |= UCSSEL_2;                     // SMCLK
	UCB0BR0 = 0x02;                           // /2
	UCB0BR1 = 0;                              //
	UCB0CTL1 &= ~UCSWRST;                     // **Initialize USCI state machine**
//	IE2 |= UCB0RXIE;                          // Enable USCI_A0 RX interrupt

}

#if 0
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCIB0RX_ISR (void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(USCIAB0RX_VECTOR))) USCIA0RX_ISR (void)
#else
#error Compiler not supported!
#endif
{
  volatile unsigned int i;

 // while (!(IFG2 & UCA0TXIFG));              // USART1 TX buffer ready?
 // if (UC0RXBUF==SLV_Data)                  // Test for correct character RX'd
 //   P5OUT |= BIT1;                          // If correct, light LED
 // else
 //   P5OUT &= ~BIT1;                         // If incorrect, clear LED

//  MST_Data++;                               // Increment data
//  SLV_Data++;
//  UCA0TXBUF = MST_Data;                     // Send next value

//  for(i=30;i>0;i--);                        // Add time between transmissions to
}
#endif


void send(void)
{

}

void read(void)
{

}
