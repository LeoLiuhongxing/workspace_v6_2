/*
 * IIC.c
 *
 *  Created on: 2017年11月30日
 *      Author: leo
 */

#include <msp430.h>
#include "IIC.h"

//#define W_EEPROM_LENGH    14


//unsigned char EEPROM_ByteWrite(unsigned int addr,unsigned char data);
//unsigned char EEPROM_RandomRead(unsigned int addr);
//unsigned char EEPROM_SequentialRead(unsigned int addr,unsigned int n,unsigned char* p);
//unsigned int EEPROM_PageWrite(unsigned int page,unsigned char* p,unsigned char n);

void i2c_delay(unsigned char us)
{
	unsigned char tmp;
	while(us--)
	{
		for(tmp=0;tmp<80;tmp++)
		{
			_NOP();
		}
	}
}

void i2c_delay_ms(unsigned char ms)
{
	unsigned int tmp;
	unsigned char i =8;
	unsigned char j = 0;
	j = ms;
	for (i=0;i<4;i++)
	{
	    ms = j;
		while(ms--)
	    {
		   for(tmp=0;tmp<5000;tmp++)
		   {
			   _NOP();
		   }
	    }
	}
}

void i2c_start(void)
{
	SDA_OUT;
	i2c_delay(20);
	SDA_HIGH;
	i2c_delay(3);
	SCL_HIGH;
	i2c_delay(2);
	SDA_LOW;
	i2c_delay(5);
	SCL_LOW;
	i2c_delay(10);
}

void i2c_stop(void)
{
	SDA_OUT;
	SDA_LOW;
	i2c_delay(2);
	SCL_HIGH;
	i2c_delay(2);
	SDA_LOW;
	i2c_delay(2);
	SDA_HIGH;
}

void i2c_SendAck(void)
{
	SDA_OUT;
	SDA_LOW;
	i2c_delay(2);
	SCL_LOW;
	i2c_delay(2);
	SCL_HIGH;
	i2c_delay(2);
	SCL_LOW;
	SDA_HIGH;
}

void i2c_SendNoAck(void)
{
	SDA_OUT;
	SDA_HIGH;
	i2c_delay(2);
	SCL_LOW;
	i2c_delay(2);
	SCL_HIGH;
	i2c_delay(2);
	SCL_LOW;
}

unsigned char i2c_check_ACK(void)
{
	unsigned char AckStatus;
	SDA_IN;
	SCL_HIGH;
	i2c_delay(2);
	if(P2IN & 0x02)
	{
		AckStatus = FALSE;
	}
	else
	{
		AckStatus = TRUE;
	}
	SCL_LOW;
	i2c_delay(2);
	SDA_OUT;
	return AckStatus;
}

void i2c_SendByte(unsigned char data)
{
	unsigned char tmp;
	SDA_OUT;
	for(tmp=0;tmp<8;tmp++)
	{
		if(data & 0x80)
		{
			SDA_HIGH;
		}
		else
		{
			SDA_LOW;
		}
		i2c_delay(2);
		SCL_HIGH;
		i2c_delay(2);
		SCL_LOW;
		i2c_delay(2);
		data <<= 1;
	}
	i2c_delay(15);
}

unsigned char i2c_RevByte(void)
{
	unsigned char tmp;
	unsigned char DATA=0;
	SDA_IN;
	SCL_LOW;
	i2c_delay(2);
	for(tmp=0;tmp<8;tmp++)
	{
		SCL_HIGH;
		i2c_delay(2);
		DATA <<= 1;
		if(P2IN & 0x01)
		{
			DATA |= 0x01;
		}
		else
		{
			DATA &= 0xfe;
		}
		SCL_LOW;
	}
	SDA_OUT;
	return DATA;
}

#if 0
unsigned char EEPROM_ByteWrite(unsigned int addr,unsigned char data)
{
unsigned char Dev_addr; //设备地址
unsigned char AddrLow;
unsigned char AddrHigh;
AddrLow = (unsigned char)addr;
AddrHigh = (unsigned char)(addr>>8);
Dev_addr = 0xa0|(AddrHigh<<1);
i2c_start();
i2c_SendByte(Dev_addr);
if(i2c_check_ACK() == FALSE)
{
return AckError;
}
i2c_SendByte(AddrHigh);
if(i2c_check_ACK() == FALSE)
{
return AckError;
}
i2c_SendByte(AddrLow);
if(i2c_check_ACK() == FALSE)
{
return AckError;
}
i2c_SendByte(data);
if(i2c_check_ACK() == FALSE)
{
return AckError;
}
i2c_stop();
i2c_delay_ms(10);
return 0;
}

unsigned char EEPROM_RandomRead(unsigned int addr)
{
unsigned char Dev_addr; //设备地址
unsigned char AddrLow;
unsigned char AddrHigh;
unsigned char tmp;
AddrLow = (unsigned char)addr;
AddrHigh = (unsigned char)(addr>>8);
Dev_addr = 0xa0|(AddrHigh<<1);
i2c_start();
i2c_SendByte(Dev_addr);
if(i2c_check_ACK() == FALSE)
{
return AckError;
}
i2c_delay_ms(5);
i2c_SendByte(AddrHigh);
if(i2c_check_ACK() == FALSE)
{
return AckError;
}
i2c_SendByte(AddrLow);
if(i2c_check_ACK() == FALSE)
{
return AckError;
}
i2c_delay_ms(5);
i2c_start();
Dev_addr = 0xa1|(AddrHigh<<1);
i2c_SendByte(Dev_addr);
if(i2c_check_ACK() == FALSE)
{
 return AckError;
}
i2c_delay_ms(5);
tmp = i2c_RevByte();
i2c_SendNoAck();
i2c_stop();
i2c_delay(100);
return tmp;
}

unsigned int EEPROM_PageWrite(unsigned int page,unsigned char* p,unsigned char n)
{
unsigned char Dev_addr;
unsigned char AddrLow;
unsigned char AddrHigh;
unsigned int tmp;
if((n > 64)|(page > 512)) //根据读写的设备而变更为适合的页数和每页字节数
{
return OutOfRang;
}
tmp = ((unsigned int)page) << 6; //得出页首地址
AddrLow = (unsigned char)tmp;
AddrHigh = (unsigned char)(tmp>>8);
Dev_addr = 0xa0 | (AddrHigh << 1);
i2c_start();
i2c_SendByte(Dev_addr);
if(i2c_check_ACK() == FALSE)
{
return AckError;
}
i2c_delay_ms(5);
i2c_SendByte(AddrHigh);
if(i2c_check_ACK() == FALSE)
{
return AckError;
}
i2c_SendByte(AddrLow);
if(i2c_check_ACK() == FALSE)
{
return AckError;
}
while(n--)
{
i2c_SendByte(*p++);
if(i2c_check_ACK() == FALSE)
{
 return AckError;
}
}
i2c_stop();
i2c_delay_ms(10);
return 0;
}

unsigned char EEPROM_SequentialRead(unsigned int addr,unsigned int n,unsigned char* p)
{
unsigned char Dev_addr; //设备地址
unsigned char AddrLow;
unsigned char AddrHigh;
if(n > (32768 - addr)) //检查预写入地址是否有效
{
return OutOfAddr;
}
AddrLow = (unsigned char)addr;
AddrHigh = (unsigned char)(addr>>8);
Dev_addr = 0xa0|(AddrHigh<<1);
i2c_start();
i2c_SendByte(Dev_addr);
if(i2c_check_ACK() == FALSE)
{
return AckError;
}
i2c_delay_ms(5);
i2c_SendByte(AddrHigh);
if(i2c_check_ACK() == FALSE)
{
return AckError;
}
i2c_SendByte(AddrLow);
if(i2c_check_ACK() == FALSE)
{
return AckError;
}
i2c_delay_ms(5);
i2c_start();
Dev_addr = 0xa1|(AddrHigh<<1);
i2c_SendByte(Dev_addr);
if(i2c_check_ACK() == FALSE)
{
return AckError;
}
while(n--)
{
*p = i2c_RevByte();
p++;
if(n)
i2c_SendAck();
else
i2c_SendNoAck();
}
i2c_stop();
return 0;
}

main()
{
//unsigned char tt,tt1;
WDTCTL = WDTPW + WDTHOLD; // Stop watchdog timer
DCOCTL = 0X73;
BCSCTL1= 0X87; // 设置时钟频率4.00MHz
P5DIR |=0X03;
P5OUT |=0X03;
//EEPROM_ByteWrite(0x0,12);
//tt=EEPROM_RandomRead(0x0);
//tt1=tt;
EEPROM_PageWrite(2,dat,14);
EEPROM_SequentialRead(128,14,x);
}
#endif

